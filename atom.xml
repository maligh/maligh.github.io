<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>记录学习中的点滴-MaLi</title>
  <subtitle>记录学习中的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://superma.me/"/>
  <updated>2017-06-14T15:17:18.000Z</updated>
  <id>http://superma.me/</id>
  
  <author>
    <name>Mali</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS常量(const)、enum、宏(#define)的使用场景及区别</title>
    <link href="http://superma.me/2016/04/30/post/"/>
    <id>http://superma.me/2016/04/30/post/</id>
    <published>2016-04-29T18:37:54.000Z</published>
    <updated>2017-06-14T15:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前言：本文主要梳理iOS中如何使用常量、enum、宏，以及各自的使用场景。</p>
</blockquote>
<h2 id="重要的事情首先说："><a href="#重要的事情首先说：" class="headerlink" title="重要的事情首先说："></a>重要的事情首先说：</h2><p>在iOS开发中请尽量多使用const、enum来代替宏定义(#define)；随着项目工程的逐渐增大，过多的宏定义还可能影响项目的运行速度（这点待考证）</p>
<ul>
<li>宏定义大家应该都不陌生，使用起来非常简单，首先我们先来看一下宏定义跟const的区别：<br>1.宏在编译开始之前就会被替换，而const只是变量进行修饰;<br>2.宏可以定义一些函数方法，const不能<br>3.宏编译时只替换不做检查不报错，也就是说有重复定义问题。而const会编译检查，会报错</li>
</ul>
<hr>
<h2 id="那到底什么时候使用宏，什么时候该使用const？"><a href="#那到底什么时候使用宏，什么时候该使用const？" class="headerlink" title="那到底什么时候使用宏，什么时候该使用const？"></a>那到底什么时候使用宏，什么时候该使用const？</h2><a id="more"></a>
<ul>
<li>定义<code>不对外公开的常量</code>的时候，我们应该尽量先考虑使用 static 方式声名const来替代使用宏定义。const不能满足的情况再考虑使用宏定义。比如用以下定义：<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kConst = <span class="string">@"Hello"</span>；</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> kWidth = <span class="number">10.0</span>;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>代替：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define DEFINE @<span class="meta-string">"Hello"</span></span></div><div class="line"><span class="meta">#define WIDTH 10.0</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>当定义<code>对外公开的常量</code>的时候，我们一般使用如下定义：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Test.h</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CLASSNAMEconst</span>;</div><div class="line"><span class="comment">//Test.m</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> <span class="built_in">CLASSNAMEconst</span> = <span class="string">@"hello"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>对于整型类型，代替宏定义直接定义整型常量比较好的办法是使用enum，使用enum时推荐使用NS_ENUM和NS_OPTIONS宏。比如用以下定义：<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSInteger</span>,TestEnum) &#123;</div><div class="line">        MY_INT_CONST = <span class="number">12345</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>代替：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define MY_INT_CONST 12345</span></div></pre></td></tr></table></figure></p>
<p>NS_OPTIONS定义方式如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSInteger</span>, SelectType) &#123;</div><div class="line">        SelectA    = <span class="number">0</span>,</div><div class="line">        SelectB    = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</div><div class="line">        SelectC    = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">        SelectD    = <span class="number">1</span> &lt;&lt; <span class="number">2</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<!--readmore-->
<hr>
<h2 id="下面顺便说一下const-的一些使用方式，主要说明这几种写法的区别："><a href="#下面顺便说一下const-的一些使用方式，主要说明这几种写法的区别：" class="headerlink" title="下面顺便说一下const 的一些使用方式，主要说明这几种写法的区别："></a>下面顺便说一下const 的一些使用方式，主要说明这几种写法的区别：</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> *constString1 = <span class="string">@"I am a const NSString * string"</span>;</div><div class="line"><span class="built_in">NSString</span> <span class="keyword">const</span> *constString2 = <span class="string">@"I am a NSString const * string"</span>;</div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span> *staticConstString1 = <span class="string">@"I am a static const NSString * string"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> <span class="keyword">const</span> *staticConstString2 = <span class="string">@"I am a static NSString const * string"</span>;</div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> stringConst = <span class="string">@"I am a NSString * const string"</span>;</div></pre></td></tr></table></figure>
<hr>
<p>全局变量：<br> <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//全局变量，constString1地址不能修改，constString1值能修改</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">NSString</span> *constString1 = <span class="string">@"I am a const NSString * string"</span>;</div><div class="line"><span class="comment">//意义同上，无区别</span></div><div class="line"><span class="built_in">NSString</span> <span class="keyword">const</span> *constString2 = <span class="string">@"I am a NSString const * string"</span>;</div><div class="line"><span class="comment">// stringConst 地址能修改，stringConst值不能修改</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> stringConst = <span class="string">@"I am a NSString * const string"</span>;</div></pre></td></tr></table></figure></p>
<p>constString1 跟constString2 无区别.<br>＊左边代表指针本身的类型信息，const表示这个指针指向的这个地址是不可变的<br>＊右边代表指针指向变量的可变性，即指针存储的地址指向的内存单元所存储的变量的可变性</p>
<hr>
<p>局部常量：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作用域只在本文件中</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSString</span> *kstaticConstString1 = <span class="string">@"I am a static const NSString * string"</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> <span class="keyword">const</span> *kstaticConstString2 = <span class="string">@"I am a static NSString const * string"</span>;</div><div class="line"><span class="comment">//---------------------------</span></div></pre></td></tr></table></figure></p>
<hr>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>不要用宏定义定义常量，能用const,enum替换的以后就少用宏定义吧。有任何问题或者指点请直接留言，欢迎拍砖~最后感谢你的时间~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：本文主要梳理iOS中如何使用常量、enum、宏，以及各自的使用场景。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;重要的事情首先说：&quot;&gt;&lt;a href=&quot;#重要的事情首先说：&quot; class=&quot;headerlink&quot; title=&quot;重要的事情首先说：&quot;&gt;&lt;/a&gt;重要的事情首先说：&lt;/h2&gt;&lt;p&gt;在iOS开发中请尽量多使用const、enum来代替宏定义(#define)；随着项目工程的逐渐增大，过多的宏定义还可能影响项目的运行速度（这点待考证）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;宏定义大家应该都不陌生，使用起来非常简单，首先我们先来看一下宏定义跟const的区别：&lt;br&gt;1.宏在编译开始之前就会被替换，而const只是变量进行修饰;&lt;br&gt;2.宏可以定义一些函数方法，const不能&lt;br&gt;3.宏编译时只替换不做检查不报错，也就是说有重复定义问题。而const会编译检查，会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;那到底什么时候使用宏，什么时候该使用const？&quot;&gt;&lt;a href=&quot;#那到底什么时候使用宏，什么时候该使用const？&quot; class=&quot;headerlink&quot; title=&quot;那到底什么时候使用宏，什么时候该使用const？&quot;&gt;&lt;/a&gt;那到底什么时候使用宏，什么时候该使用const？&lt;/h2&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://superma.me/categories/Objective-C/"/>
    
    
      <category term="宏" scheme="http://superma.me/tags/%E5%AE%8F/"/>
    
      <category term="常量" scheme="http://superma.me/tags/%E5%B8%B8%E9%87%8F/"/>
    
  </entry>
  
</feed>
