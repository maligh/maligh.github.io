{"meta":{"title":"记录学习中的点滴-MaLi","subtitle":"记录学习中的点滴","description":"记录学习中的点点滴滴，努力打怪升级~  Objective-C && PHP && Swift && Python","author":"Mali","url":"http://superma.me"},"pages":[{"title":"","date":"2017-05-03T15:33:05.000Z","updated":"2017-05-03T15:33:05.000Z","comments":true,"path":"404.html","permalink":"http://superma.me/404.html","excerpt":"","text":"404 *{margin:0;padding:0;outline:none;font-family:\\5FAE\\8F6F\\96C5\\9ED1,宋体;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-khtml-user-select:none;user-select:none;cursor:default;font-weight:lighter;} .center{margin:0 auto;} .whole{width:100%;height:100%;line-height:100%;position:fixed;bottom:0;left:0;z-index:-1000;overflow:hidden;} .whole img{width:100%;height:100%;} .mask{width:100%;height:100%;position:absolute;top:0;left:0;background:#000;opacity:0.6;filter:alpha(opacity=60);} .b{width:100%;text-align:center;height:400px;position:absolute;top:50%;margin-top:-230px}.a{width:150px;height:50px;margin-top:30px}.a a{display:block;float:left;width:150px;height:50px;background:#fff;text-align:center;line-height:50px;font-size:18px;border-radius:25px;color:#333}.a a:hover{color:#000;box-shadow:#fff 0 0 20px} p{color:#fff;margin-top:40px;font-size:24px;} #num{margin:0 5px;font-weight:bold;} var num=4; function redirect(){ num--; document.getElementById(\"num\").innerHTML=num; if(num"},{"title":"about","date":"2017-05-09T15:15:37.000Z","updated":"2017-05-09T15:15:37.000Z","comments":true,"path":"about/index.html","permalink":"http://superma.me/about/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2017-06-20T15:39:04.000Z","updated":"2017-06-20T15:39:04.000Z","comments":false,"path":"all-categories/index.html","permalink":"http://superma.me/all-categories/index.html","excerpt":"","text":""},{"title":"all-archives","date":"2017-06-20T15:43:52.000Z","updated":"2017-06-20T15:43:52.000Z","comments":false,"path":"all-archives/index.html","permalink":"http://superma.me/all-archives/index.html","excerpt":"","text":""},{"title":"all-tags","date":"2017-06-20T15:39:52.000Z","updated":"2017-06-20T15:39:52.000Z","comments":false,"path":"all-tags/index.html","permalink":"http://superma.me/all-tags/index.html","excerpt":"","text":""}],"posts":[{"title":"iOS常量(const)、enum、宏(#define)的使用场景及区别","slug":"post","date":"2016-04-29T18:37:54.000Z","updated":"2017-06-20T15:25:11.000Z","comments":true,"path":"2016/04/30/post/","link":"","permalink":"http://superma.me/2016/04/30/post/","excerpt":"前言：本文主要梳理iOS中如何使用常量、enum、宏，以及各自的使用场景。 重要的事情首先说：在iOS开发中请尽量多使用const、enum来代替宏定义(#define)；随着项目工程的逐渐增大，过多的宏定义还可能影响项目的运行速度（这点待考证） 宏定义大家应该都不陌生，使用起来非常简单，首先我们先来看一下宏定义跟const的区别：1.宏在编译开始之前就会被替换，而const只是变量进行修饰;2.宏可以定义一些函数方法，const不能3.宏编译时只替换不做检查不报错，也就是说有重复定义问题。而const会编译检查，会报错 那到底什么时候使用宏，什么时候该使用const？","text":"前言：本文主要梳理iOS中如何使用常量、enum、宏，以及各自的使用场景。 重要的事情首先说：在iOS开发中请尽量多使用const、enum来代替宏定义(#define)；随着项目工程的逐渐增大，过多的宏定义还可能影响项目的运行速度（这点待考证） 宏定义大家应该都不陌生，使用起来非常简单，首先我们先来看一下宏定义跟const的区别：1.宏在编译开始之前就会被替换，而const只是变量进行修饰;2.宏可以定义一些函数方法，const不能3.宏编译时只替换不做检查不报错，也就是说有重复定义问题。而const会编译检查，会报错 那到底什么时候使用宏，什么时候该使用const？ 定义不对外公开的常量的时候，我们应该尽量先考虑使用 static 方式声名const来替代使用宏定义。const不能满足的情况再考虑使用宏定义。比如用以下定义：12static NSString * const kConst = @\"Hello\"；static const CGFloat kWidth = 10.0; 代替：12#define DEFINE @\"Hello\"#define WIDTH 10.0 当定义对外公开的常量的时候，我们一般使用如下定义： 1234//Test.hextern NSString * const CLASSNAMEconst;//Test.mNSString * const CLASSNAMEconst = @\"hello\"; 对于整型类型，代替宏定义直接定义整型常量比较好的办法是使用enum，使用enum时推荐使用NS_ENUM和NS_OPTIONS宏。比如用以下定义：123typedef NS_ENUM(NSInteger,TestEnum) &#123; MY_INT_CONST = 12345&#125;; 代替：1#define MY_INT_CONST 12345 NS_OPTIONS定义方式如下：123456typedef NS_OPTIONS(NSInteger, SelectType) &#123; SelectA = 0, SelectB = 1 &lt;&lt; 0, SelectC = 1 &lt;&lt; 1, SelectD = 1 &lt;&lt; 2&#125;; 下面顺便说一下const 的一些使用方式，主要说明这几种写法的区别：12345const NSString *constString1 = @\"I am a const NSString * string\";NSString const *constString2 = @\"I am a NSString const * string\";static const NSString *staticConstString1 = @\"I am a static const NSString * string\";static NSString const *staticConstString2 = @\"I am a static NSString const * string\";NSString * const stringConst = @\"I am a NSString * const string\"; 全局变量： 123456//全局变量，constString1地址不能修改，constString1值能修改const NSString *constString1 = @\"I am a const NSString * string\";//意义同上，无区别NSString const *constString2 = @\"I am a NSString const * string\";// stringConst 地址能修改，stringConst值不能修改NSString * const stringConst = @\"I am a NSString * const string\"; constString1 跟constString2 无区别.＊左边代表指针本身的类型信息，const表示这个指针指向的这个地址是不可变的＊右边代表指针指向变量的可变性，即指针存储的地址指向的内存单元所存储的变量的可变性 局部常量：1234//作用域只在本文件中static const NSString *kstaticConstString1 = @\"I am a static const NSString * string\";static NSString const *kstaticConstString2 = @\"I am a static NSString const * string\";//--------------------------- 总结：不要用宏定义定义常量，能用const,enum替换的以后就少用宏定义吧。有任何问题或者指点请直接留言，欢迎拍砖~最后感谢你的时间~","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://superma.me/all-categories/Objective-C/"}],"tags":[{"name":"宏","slug":"宏","permalink":"http://superma.me/all-tags/宏/"},{"name":"常量","slug":"常量","permalink":"http://superma.me/all-tags/常量/"}]}]}